server {
    listen [::]:80 default_server ipv6only=off;
    # Use Roadiz Standard Edition real root.
    root /var/www/app;

    #client_body_temp_path /var/www/app/tmp/client_body 1 2;
    fastcgi_temp_path /var/www/app/tmp/fastcgi 1 2;

    index index.php;

    add_header X-Frame-Options "ALLOW-FROM http://hassio.phuonglm.net/";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    location ~ /\.ht {
        deny all;
    }
    location ~ /\.git {
        deny all;
    }

    # Accept custom 404 error pages at project root
    error_page 404 /error-404.html;
    location = /error-404.html {
       root /var/www/html;
       internal;
    }

    # Accept custom 500x error pages at project root
    error_page 500 502 503 504 /error-50x.html;
    location = /error-50x.html {
       root /var/www/html;
       internal;
    }

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to front-end controller
        # (do not forget to pass GET parameters).
        try_files $uri $uri/ /index.php$is_args$args;
    }

    location /data {
      secure_link $arg_md5,$arg_expires;
      secure_link_md5 "$secure_link_expires$uri <HOTLINK_SECRET>";

      if ($secure_link = "") {
          return 403;
      }

      if ($secure_link = "0") {
          return 410;
      }
      root /var/www/app;
    }

    location ~ ^/.+\.php {
        root /var/www/app;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_pass unix:/var/run/php-fpm.sock;
        fastcgi_index index.php;

        fastcgi_param  QUERY_STRING       $query_string;
        fastcgi_param  REQUEST_METHOD     $request_method;
        fastcgi_param  CONTENT_TYPE       $content_type;
        fastcgi_param  CONTENT_LENGTH     $content_length;


        fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;

        fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;
        fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
        fastcgi_param  DOCUMENT_ROOT      $document_root;
        fastcgi_param  REQUEST_URI        $request_uri;
        fastcgi_param  DOCUMENT_URI       $document_uri;
        fastcgi_param  SERVER_PROTOCOL    $server_protocol;

        #fastcgi_split_path_info          ^(.+\.php)(/.+)$;
        fastcgi_split_path_info           ^((?U).+\.php)(/?.+)$;
        #the two lines below are possible now because of the fastcgi_split_path_info function
        fastcgi_param  PATH_INFO          $document_uri;
        fastcgi_param  PATH_TRANSLATED    $document_root$fastcgi_path_info;

        fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
        fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;

        fastcgi_param  REMOTE_ADDR        $remote_addr;
        #fastcgi_param  REMOTE_ADDR       $http_x_real_ip;
        fastcgi_param  REMOTE_PORT        $remote_port;
        fastcgi_param  SERVER_ADDR        $server_addr;
        fastcgi_param  SERVER_NAME        $server_name;
        fastcgi_pass_header         Authorization;
        # fastcgi_intercept_errors    on;
        # PHP only, required if PHP was built with --enable-force-cgi-redirect
        fastcgi_param  REDIRECT_STATUS    200;

        fastcgi_split_path_info ^(.+\.php)(.*)$;
        include fastcgi_params;
        try_files $uri =404;
        # Prevents URIs that include the front controller. This will 404:
        # http://domain.tld/app.php/some-path
        # Remove the internal directive to allow URIs like this
        # internal;
    }


    # Don't log robots.txt or favicon.ico files
    location = /favicon.ico { log_not_found off; access_log off; }
    location = /robots.txt  { allow all; access_log off; log_not_found off; }
}
